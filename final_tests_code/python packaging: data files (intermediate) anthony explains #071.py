import random
import langchain_openai
import langchain_core
def generate_questions() -> list[str]:
    questions = ['What is the topic of the video?', 'What are the common options for managing resources in Python packages?', 'What are the two types of distributions discussed in the video?', 'How can the speaker generate both a source distribution and a wheel for a Python package?', 'What command is used to show the contents of a wheel file?', 'What command is used to show the contents of a source distribution file?', 'What is the suggested method for managing resources in Python packages according to the speaker?', 'What is the purpose of manifest.in in Python packaging?', 'How can the speaker use manifest.in to include specific files in the source distribution?', 'What is an example of using manifest.in to include a JSON file in the source distribution and process it during the build process?', 'What is the purpose of including data files in a source distribution?', 'What is the common approach to including data files in the installed state or in a wheel package?', 'How can the speaker include specific data files in both the source distribution and the final distribution without using manifest.in file?', 'What is the purpose of using package data in Python?', 'How can the speaker include package data in a Python package?', 'How can the speaker access resources at runtime in Python?', 'Can the speaker provide an example of accessing resources at runtime in Python using `importlib.resources` or `importlib_resources`?']
    return random.sample(questions, min(len(questions), 5))


def generate_answers(question: str, answer: str, _: str) -> bool | str:
    reference_answers = dict(zip(['What is the topic of the video?', 'What are the common options for managing resources in Python packages?', 'What are the two types of distributions discussed in the video?', 'How can the speaker generate both a source distribution and a wheel for a Python package?', 'What command is used to show the contents of a wheel file?', 'What command is used to show the contents of a source distribution file?', 'What is the suggested method for managing resources in Python packages according to the speaker?', 'What is the purpose of manifest.in in Python packaging?', 'How can the speaker use manifest.in to include specific files in the source distribution?', 'What is an example of using manifest.in to include a JSON file in the source distribution and process it during the build process?', 'What is the purpose of including data files in a source distribution?', 'What is the common approach to including data files in the installed state or in a wheel package?', 'How can the speaker include specific data files in both the source distribution and the final distribution without using manifest.in file?', 'What is the purpose of using package data in Python?', 'How can the speaker include package data in a Python package?', 'How can the speaker access resources at runtime in Python?', 'Can the speaker provide an example of accessing resources at runtime in Python using `importlib.resources` or `importlib_resources`?'], ['Python packaging and managing resources like data files in packages.', 'Using manifest.in with include_package_data=True, but it may include unnecessary files, or other methods like using data_files or package_data.', 'Source distributions and wheels.', "By running 'python setup.py sdist bdist_wheel' command.", "'unzip -l' command.", "'tar -tf' command.", 'The speaker suggests that using manifest.in with include_package_data=True may not be the best approach, and recommends other methods like data_files or package_data.', 'The purpose of manifest.in in Python packaging is to add data files to the source distribution. It allows the speaker to specify additional files that should be included in the source distribution but not in the final wheel distribution.', "You can use manifest.in with special directives like 'recursive-include' to specify files or directories that should be included in the source distribution. For example, 'recursive-include my_package/data *.json' would include all JSON files in the 'data' directory of 'my_package' in the source distribution.", 'An example of using manifest.in to include a JSON file in the source distribution and process it during the build process is by creating a custom build command in setup.py that reads the JSON file, processes it, and generates a new Python file based on its content. This allows for additional file generation during the build process.', 'The purpose of including data files in a source distribution is to ensure that the produced output can be built successfully from the source distribution, even if the data files are not directly included in the source code.', "The common approach is to set 'include_package_data=True' in the setup tools configuration, which includes all files listed in the manifest.in file in the final installed state or wheel package.", "You can explicitly include specific data files using the 'package_data' configuration in setup tools, mapping package names to the globs of their data files. This approach allows the speaker to include only the necessary files in both distributions without relying on the manifest.in file.", 'Package data in Python is used to include additional files or resources within a package that are needed at runtime. These files are not automatically included in the package by default, but can be accessed using the package data feature.', 'There are two main ways to include package data in a Python package. One way is to specify the data files in the `package_data` field in the `setup.py` file, mapping the package name to the file or directory. Another way is to list subdirectories in the `package_data` field to include all files within those directories.', 'To access resources at runtime in Python, the speaker can use the `importlib.resources` module or the `importlib_resources` backport for older versions. These modules provide APIs for accessing data files and resources within a package.', 'An example of accessing resources at runtime in Python using `importlib.resources` or `importlib_resources` is demonstrated in the `pre-commit` package. The package uses these modules to access necessary files and resources at runtime, such as retrieving file contents using the `open_binary` function from the `resources` namespace.']))
    chat = langchain_openai.ChatOpenAI(model="gpt-3.5-turbo-1106", temperature=0)
    chat_answer = chat.invoke(
        [
            langchain_core.messages.SystemMessage(content="You will be given question, reference answer pair and users answer. "
                                  'You have to decide if the answer is correct. '
                                  'If it is respond with a single work "Correct" otherwise return a hint about the answer. '),
            langchain_core.messages.SystemMessage(content='The question: ' + question + '\n'
                                  'The reference answer: ' + reference_answers[question]),
            langchain_core.messages.HumanMessage(
                content=answer
            )
        ]
    ).content
    if chat_answer.startswith("Correct"):
        return True
    return chat_answer
