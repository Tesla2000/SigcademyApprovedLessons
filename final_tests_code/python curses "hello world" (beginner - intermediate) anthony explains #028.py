import random
import langchain_openai
import langchain_core
def generate_questions() -> list[str]:
    questions = ['What is curses?', 'Why did the speaker get into curses?', 'How does curses set up the screen structure for rendering?', 'What is the basic structure of a curses program according to the speaker?', 'What does the function get_wch do?', 'How can the speaker exit the program when using get_wch?', 'What is the difference between insert_str and add_str in curses?', 'How can the speaker handle moving the cursor after using insert_str for input?', 'What can happen if a string is written past the end of a line in curses?', 'What is the purpose of the code snippet provided?', 'What is the potential issue mentioned in the code snippet when trying to draw 80 characters on the screen?', 'How is backspace functionality implemented in the code snippet?', 'What action triggers the completion of input entry in the code snippet?', "What is the initial value of 'name_done'?", "What message will be printed if 'name_done' is true?", "What message will be printed on the second line if 'name_done' is true?"]
    return random.sample(questions, min(len(questions), 5))


def generate_answers(question: str, answer: str, _: str) -> bool | str:
    reference_answers = dict(zip(['What is curses?', 'Why did the speaker get into curses?', 'How does curses set up the screen structure for rendering?', 'What is the basic structure of a curses program according to the speaker?', 'What does the function get_wch do?', 'How can the speaker exit the program when using get_wch?', 'What is the difference between insert_str and add_str in curses?', 'How can the speaker handle moving the cursor after using insert_str for input?', 'What can happen if a string is written past the end of a line in curses?', 'What is the purpose of the code snippet provided?', 'What is the potential issue mentioned in the code snippet when trying to draw 80 characters on the screen?', 'How is backspace functionality implemented in the code snippet?', 'What action triggers the completion of input entry in the code snippet?', "What is the initial value of 'name_done'?", "What message will be printed if 'name_done' is true?", "What message will be printed on the second line if 'name_done' is true?"], ['Curses is a cell-based terminal UI library that allows the speaker to create text-based user interfaces on the terminal. It is commonly used for rendering UI elements in text editors like nano.', 'The speaker got into curses because they wrote their own text editor and wanted to learn more about curses. They also mentioned other unimportant reasons for getting into curses.', 'Curses sets up the screen structure for rendering using the curses.wrapper function, which initializes the curses UI and resets it at the end. It passes a function to set up the screen structure and rendering.', 'The basic structure of a curses program according to the speaker includes defining a main function, a curses main function, and using an infinite loop for rendering and retrieval phases. The program starts with initializing curses, then enters an infinite loop for rendering to the screen and retrieving user input.', 'It retrieves a character from the keyboard and waits until it gets that character.', 'You can use Ctrl+C to exit the program.', 'insert_str inserts a string at a specified position and leaves the cursor at that position, while add_str inserts a string and moves the cursor to the next position automatically.', 'You can use a function like move to move the cursor to the desired position after inserting the string.', 'If a string is written past the end of a line, the cursor may move to the next line, which can cause issues or crashes in some cases.', 'The purpose of the code snippet is to demonstrate how to retrieve user input character by character, display the characters on the screen, handle backspace functionality, and detect when the user presses Enter to complete input entry.', "Drawing 80 characters on the screen may cause the cursor to go off the bottom right-hand corner of the screen, leading to an error in curses. It's important to be cautious about the screen boundaries when working with curses.", 'Backspace functionality is implemented by checking for the backspace character (ASCII code 127 or X9F) input by the user. When the backspace character is detected, the code removes the last character from the input string to simulate backspacing.', "Pressing Enter triggers the completion of input entry. When the Enter key is pressed, a boolean flag 'name_done' is set to true, indicating that the input entry is finished, and a welcome message is displayed on the screen.", 'false', 'Oh welcome Anthony, well whatever your name is, Stan is scurry on stir', 'Oh welcome Anthony, well whatever your name is, Stan is scurry on stir']))
    chat = langchain_openai.ChatOpenAI(model="gpt-3.5-turbo-1106", temperature=0)
    chat_answer = chat.invoke(
        [
            langchain_core.messages.SystemMessage(content="You will be given question, reference answer pair and users answer. "
                                  'You have to decide if the answer is correct. '
                                  'If it is respond with a single work "Correct" otherwise return a hint about the answer. '),
            langchain_core.messages.SystemMessage(content='The question: ' + question + '\n'
                                  'The reference answer: ' + reference_answers[question]),
            langchain_core.messages.HumanMessage(
                content=answer
            )
        ]
    ).content
    if chat_answer.startswith("Correct"):
        return True
    return chat_answer
