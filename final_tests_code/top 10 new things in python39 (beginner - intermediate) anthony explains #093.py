import random
import langchain_openai
import langchain_core
def generate_questions() -> list[str]:
    questions = ['What is the first feature the speaker is excited about in Python 3.9?', 'How were generics handled in Python 3.8 and before?', 'What is the benefit of using built-in types for generics in Python 3.9?', 'What is the second feature discussed by the speaker in Python 3.9?', 'What are the new merge operators introduced in Python 3.9?', 'What are the new methods introduced in Python 3.9 for removing prefixes and suffixes from strings?', 'What change was made to sys.stderr in Python 3.9 regarding buffering?', 'What is the new method in Python 3.9 that allows the speaker to load and write out Python source code?', 'What is the new parser introduced in Python 3.9?', 'What is the new syntax introduced in Python 3.9 that improves the readability of context managers?', 'What new feature in Python 3.9 allows for implicit continuation and trailing commas in statements?', 'How has the double under file magical global of interactive scripts changed in Python 3.9?', 'What new APIs were added to the curses module in Python 3.9?', 'What change was made to decorators in Python 3.9 regarding valid expressions?', 'What is the new feature in Python 3.9 that allows for arbitrary expressions in certain contexts?', 'What is the name of the new module introduced in Python 3.9 that provides time zone information for datetime objects?', 'What important type was added to the graphlib module in Python 3.9?']
    return random.sample(questions, min(len(questions), 5))


def generate_answers(question: str, answer: str, _: str) -> bool | str:
    reference_answers = dict(zip(['What is the first feature the speaker is excited about in Python 3.9?', 'How were generics handled in Python 3.8 and before?', 'What is the benefit of using built-in types for generics in Python 3.9?', 'What is the second feature discussed by the speaker in Python 3.9?', 'What are the new merge operators introduced in Python 3.9?', 'What are the new methods introduced in Python 3.9 for removing prefixes and suffixes from strings?', 'What change was made to sys.stderr in Python 3.9 regarding buffering?', 'What is the new method in Python 3.9 that allows the speaker to load and write out Python source code?', 'What is the new parser introduced in Python 3.9?', 'What is the new syntax introduced in Python 3.9 that improves the readability of context managers?', 'What new feature in Python 3.9 allows for implicit continuation and trailing commas in statements?', 'How has the double under file magical global of interactive scripts changed in Python 3.9?', 'What new APIs were added to the curses module in Python 3.9?', 'What change was made to decorators in Python 3.9 regarding valid expressions?', 'What is the new feature in Python 3.9 that allows for arbitrary expressions in certain contexts?', 'What is the name of the new module introduced in Python 3.9 that provides time zone information for datetime objects?', 'What important type was added to the graphlib module in Python 3.9?'], ['Generic type annotations', 'By importing capitalized versions from the typing module or quoting parameters for certain built-in types like dict and list', 'You can use the built-in types directly without importing from the typing module, and the built-in types now have their own genericized versions', 'Merge operators using the bitwise or operation for dictionaries', "The new merge operators introduced in Python 3.9 are 'd1 | d2' for merging two dictionaries together. If a dictionary has the same key, the last key wins. Additionally, the 'd3 |= d1' syntax can be used to update dictionaries in place.", "The new methods introduced in Python 3.9 for removing prefixes and suffixes from strings are 'remove_prefix' for removing prefixes at the beginning and 'remove_suffix' for removing suffixes at the end. These methods help avoid common mistakes when using 'strip' method.", 'In Python 3.9, sys.stderr is now line buffered even when running in the background or piped. Previously, it was block buffered in non-interactive modes, causing delays in output. This change allows for immediate output of standard error messages, aiding in debugging and logging.', 'ast.unparse method', 'PEG-based parser', 'Parenthesized context managers', "Parenthesized with statements and trailing commas are now allowed in Python 3.9, especially when using the new parser, which is optionally enabled. This feature enables implicit continuation and allows for writing statements like 'v1, v2' with trolley commas.", 'In Python 3.9, the double under file magical global of interactive scripts now returns an absolute path instead of a relative path. This change makes it easier to locate files relative to a script.', "In Python 3.9, new APIs such as 'set tab size', 'get tab size', 'set escape delay', and 'get escape delay' were added to the curses module. These APIs allow for configuring tab sizes and escape delays in curses applications.", 'In Python 3.9, decorators can now be valid expressions if they are valid expressions. This means that decorators can now be more flexible and accept expressions as valid decorators, expanding the possibilities for decorators in Python code.', 'The new feature in Python 3.9 that allows for arbitrary expressions in certain contexts is the ability to have arbitrary expressions in decorators. This was not allowed in previous versions of Python but is now supported in Python 3.9.', 'The new module introduced in Python 3.9 that provides time zone information for datetime objects is the zoneinfo module. It allows users to work with time zones in Python without the need for external libraries like pytz.', 'The important type added to the graphlib module in Python 3.9 is the topological sorter. This type allows users to perform topological sorts in Python, making it easier to work with graphs and dependencies.']))
    chat = langchain_openai.ChatOpenAI(model="gpt-3.5-turbo-1106", temperature=0)
    chat_answer = chat.invoke(
        [
            langchain_core.messages.SystemMessage(content="You will be given question, reference answer pair and users answer. "
                                  'You have to decide if the answer is correct. '
                                  'If it is respond with a single work "Correct" otherwise return a hint about the answer. '),
            langchain_core.messages.SystemMessage(content='The question: ' + question + '\n'
                                  'The reference answer: ' + reference_answers[question]),
            langchain_core.messages.HumanMessage(
                content=answer
            )
        ]
    ).content
    if chat_answer.startswith("Correct"):
        return True
    return chat_answer
