import random
import langchain_openai
import langchain_core
def generate_questions() -> list[str]:
    questions = ['What is the purpose of GitHub Actions?', 'What type of repository is being used in the tutorial?', 'What are the two types of jobs being added to the repository in this tutorial?', 'Where are GitHub Actions conventionally stored in a repository?', 'What is the purpose of the pre-commit GitHub Action in the tutorial?', 'What tool is being used to run tests in the provided code snippet?', 'What feature is missing in GitHub that the user mentions would get them to switch?', 'What CI runner is shown in the output from the provided code snippet?', 'What trick is mentioned for running a specific Python environment using Tox?', 'What is the purpose of using a matrix in the GitHub workflow configuration?', 'What is the first step in the workflow?', 'What parameter is used to fold values into the matrix in GitHub Actions?', 'Why should the values be quoted in the matrix?', 'What is the command to set up Python with a specific version?', 'What tool is installed to run tasks in the workflow?', 'Why is it important to install both Tox and Virtualenv at the same time?', 'How can the speaker upgrade all installed tools in the workflow?', 'What command is used to run Tox with the selected Python version?', 'What is the final step in the workflow?', 'What is the issue with pip upgrading itself in place on Windows?', 'What is the fix for upgrading pip on Windows?', 'What platform is the user planning to stick with for now?', 'Where can viewers find the link to the pull request mentioned in the conversation?', 'How can viewers reach out with additional questions or requests?']
    return random.sample(questions, min(len(questions), 5))


def generate_answers(question: str, answer: str, _: str) -> bool | str:
    reference_answers = dict(zip(['What is the purpose of GitHub Actions?', 'What type of repository is being used in the tutorial?', 'What are the two types of jobs being added to the repository in this tutorial?', 'Where are GitHub Actions conventionally stored in a repository?', 'What is the purpose of the pre-commit GitHub Action in the tutorial?', 'What tool is being used to run tests in the provided code snippet?', 'What feature is missing in GitHub that the user mentions would get them to switch?', 'What CI runner is shown in the output from the provided code snippet?', 'What trick is mentioned for running a specific Python environment using Tox?', 'What is the purpose of using a matrix in the GitHub workflow configuration?', 'What is the first step in the workflow?', 'What parameter is used to fold values into the matrix in GitHub Actions?', 'Why should the values be quoted in the matrix?', 'What is the command to set up Python with a specific version?', 'What tool is installed to run tasks in the workflow?', 'Why is it important to install both Tox and Virtualenv at the same time?', 'How can the speaker upgrade all installed tools in the workflow?', 'What command is used to run Tox with the selected Python version?', 'What is the final step in the workflow?', 'What is the issue with pip upgrading itself in place on Windows?', 'What is the fix for upgrading pip on Windows?', 'What platform is the user planning to stick with for now?', 'Where can viewers find the link to the pull request mentioned in the conversation?', 'How can viewers reach out with additional questions or requests?'], ['GitHub Actions is a continuous integration system that allows the speaker to run tests and automate workflows in your repository.', "A Python repository called 'add trailing comma' that is already set up for continuous integration using Azure pipelines.", "1. Checking the linting of the repository using a pre-commit config file.\n2. Running the test suite for the project using 'tox'.", "GitHub Actions are conventionally stored in the '.github/workflows' directory within the repository.", 'The pre-commit GitHub Action is set up to run on pull requests and pushes to the master branch. It clones the code, installs Python, performs cache operations, and runs the pre-commit action to check the linting of the repository.', 'Tox is being used to run tests in the provided code snippet.', 'The user mentions that template repositories are missing in GitHub, which would get them to switch.', 'The CI runner shown in the output is pre-commit.', "The trick mentioned is running 'tox -p' to use the default Python that Tox is installed with.", 'The purpose of using a matrix in the GitHub workflow configuration is to test against different operating systems and Python versions in a cross-product manner.', 'Running on matrix OS.', 'Substitution parameter.', 'To ensure they are treated as strings.', 'setup-python with matrix.python-version.', 'Tox.', 'To ensure a modern enough version and have necessary tools.', "By using the command 'pip install --upgrade'.", 'Tox -a py.', 'Running Tox.', 'Pip cannot upgrade itself in place on Windows due to open files and other issues.', "The fix is to use the '--upgrade' flag when upgrading pip on Windows.", 'The user is planning to stick with Azure pipelines for now.', 'Viewers can find the link to the pull request in the video description.', 'Viewers can leave a comment below the video or contact the user on various platforms.']))
    chat = langchain_openai.ChatOpenAI(model="gpt-3.5-turbo-1106", temperature=0)
    chat_answer = chat.invoke(
        [
            langchain_core.messages.SystemMessage(content="You will be given question, reference answer pair and users answer. "
                                  'You have to decide if the answer is correct. '
                                  'If it is respond with a single work "Correct" otherwise return a hint about the answer. '),
            langchain_core.messages.SystemMessage(content='The question: ' + question + '\n'
                                  'The reference answer: ' + reference_answers[question]),
            langchain_core.messages.HumanMessage(
                content=answer
            )
        ]
    ).content
    if chat_answer.startswith("Correct"):
        return True
    return chat_answer
