import random
import langchain_openai
import langchain_core
def generate_questions() -> list[str]:
    questions = ['How do the speaker start using argparse in Python?', 'What is the purpose of the argparse module in Python?', 'What is a positional argument in argparse?', 'What are positional arguments in argparse?', 'What are optional arguments in argparse?', 'What is the convention for short options in argparse?', 'What is the convention for long options in argparse?', 'How can the speaker set defaults for arguments in argparse?', 'What is the default option for an optional option?', 'Can optional options be made required?', 'Can required and default parameters work together for an option?', 'How can the speaker specify a custom type for an option?', 'How can the speaker create a custom type for positive integers?', "What is the custom type 'count' used for?", 'How can boolean options be implemented with custom actions?', "What is the purpose of the 'append' action for arguments?", "How can the speaker restrict the values of an option using 'choices'?", 'What is the purpose of using subparsers in Python?', 'How do the speaker create subparsers in Python?', "What does setting 'required=True' for subparsers do in Python?", 'How can the speaker provide descriptions for subcommands in Python subparsers?']
    return random.sample(questions, min(len(questions), 5))


def generate_answers(question: str, answer: str, _: str) -> bool | str:
    reference_answers = dict(zip(['How do the speaker start using argparse in Python?', 'What is the purpose of the argparse module in Python?', 'What is a positional argument in argparse?', 'What are positional arguments in argparse?', 'What are optional arguments in argparse?', 'What is the convention for short options in argparse?', 'What is the convention for long options in argparse?', 'How can the speaker set defaults for arguments in argparse?', 'What is the default option for an optional option?', 'Can optional options be made required?', 'Can required and default parameters work together for an option?', 'How can the speaker specify a custom type for an option?', 'How can the speaker create a custom type for positive integers?', "What is the custom type 'count' used for?", 'How can boolean options be implemented with custom actions?', "What is the purpose of the 'append' action for arguments?", "How can the speaker restrict the values of an option using 'choices'?", 'What is the purpose of using subparsers in Python?', 'How do the speaker create subparsers in Python?', "What does setting 'required=True' for subparsers do in Python?", 'How can the speaker provide descriptions for subcommands in Python subparsers?'], ['You start by importing the argparse module and creating an ArgumentParser instance.', 'The argparse module in Python is used for parsing command line arguments and creating command line tools.', 'A positional argument in argparse is an argument that does not start with a dash (-) and is typically required by default.', 'Positional arguments are required arguments that are specified without any flag or prefix. They are typically used for essential inputs like file names or identifiers.', 'Optional arguments are arguments that are not required and are specified with flags or prefixes, such as short options (-C) or long options (--config). They provide additional functionality or configuration options.', 'Short options in argparse are typically single-letter flags prefixed with a single hyphen (-), such as -C for config file.', 'Long options in argparse are descriptive names for options that are prefixed with two hyphens (--), such as --config. They provide more readable and informative option names.', "Defaults for arguments in argparse can be set by specifying a default value when defining the argument using the 'default' parameter. This default value will be used if the argument is not provided during parsing.", "The default option for an optional option can be specified using the 'default' parameter in the configuration file.", "Optional options can be made required by setting the 'required' parameter to true.", 'Required and default parameters cannot work together for an option. If an option is required, the default value will not be applied.', "You can specify a custom type for an option by using the 'type' parameter in the argument definition. This allows the speaker to enforce a specific data type for the option.", 'To create a custom type for positive integers, the speaker can define a function that takes a string input and returns an integer. Within the function, the speaker can validate that the input is a positive integer and raise an error if it is not.', "The 'count' custom type is used for arguments that might increment or decrement something, such as a verbose option in a configuration. It starts at 0 by default and increments by 1 for each occurrence of the argument.", "Boolean options can be implemented with custom actions like 'store_true' and 'store_false'. By default, the boolean option is set to false, and passing the option sets it to true. Other options include 'store_const' for storing constants.", "The 'append' action allows an argument to be repeated and collected multiple times. It is useful for scenarios where multiple values need to be collected, such as multiple log files for a program.", "The 'choices' parameter allows the speaker to restrict the values of an option to a specific set of choices. This ensures that the user can only input values from the specified choices, providing validation and error messages for invalid inputs.", 'Subparsers in Python are used to create a command-line interface with nested commands and arguments, allowing for better organization and structure of the CLI application.', 'To create subparsers in Python, the speaker can use the argparse module. You define a main parser and then add subparsers to it using the add_subparsers() method. Each subparser represents a different command or subcommand with its own set of arguments.', "Setting 'required=True' for subparsers in Python ensures that a command is required to be provided when running the CLI application. This helps avoid errors where the command is missing or None.", "You can provide descriptions for subcommands in Python subparsers by setting the 'help' attribute for each subparser. This allows users to see descriptions of the available subcommands when running the CLI application with the '--help' flag."]))
    chat = langchain_openai.ChatOpenAI(model="gpt-3.5-turbo-1106", temperature=0)
    chat_answer = chat.invoke(
        [
            langchain_core.messages.SystemMessage(content="You will be given question, reference answer pair and users answer. "
                                  'You have to decide if the answer is correct. '
                                  'If it is respond with a single work "Correct" otherwise return a hint about the answer. '),
            langchain_core.messages.SystemMessage(content='The question: ' + question + '\n'
                                  'The reference answer: ' + reference_answers[question]),
            langchain_core.messages.HumanMessage(
                content=answer
            )
        ]
    ).content
    if chat_answer.startswith("Correct"):
        return True
    return chat_answer
