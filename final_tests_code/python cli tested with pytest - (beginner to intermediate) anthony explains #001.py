import random
import langchain_openai
import langchain_core
def generate_questions() -> list[str]:
    questions = ['What was the initial code sample provided by Panos track?', 'How was the initial code sample modified to prevent side effects at import time?', 'What was the next step in the evolution of the script after preventing side effects at import time?', 'What improvement was made to the script to make it more generic and take command line arguments?', 'What issue arose when manually referencing sys.argv for command line arguments?', 'Which argument parser was recommended as a solution to the issues with manually referencing sys.argv?', 'What is the purpose of Ark parts?', 'How do the speaker set up an argument parser using Ark parts?', 'How can the speaker handle command-line arguments when importing a module that uses Ark parts?', 'What is the purpose of writing tests for a program using Ark parts?', 'What is the purpose of adding a new line in the print statement?', 'How can the speaker ensure that a program exits with a proper return code when a specific condition is met?', 'What is the significance of return codes in command line programs?', "What is the special object in Python that prints 'This application will now exit' when called?", "What is the alternative to using the 'exit' function in Python to ensure portability and availability?", 'What is the purpose of the dollar question mark variable in bash scripting?', 'What is the purpose of adding type annotations in Python code?', 'What is the purpose of annotating type in Python?', "What is the purpose of using 'Optional' and 'Sequence' from 'typing' module in Python?", 'How can type checking be performed in Python?', "What is the purpose of setting a default value of 'None' for a variable in Python?", "What is the significance of '__name__' and '__main__' in Python scripts?"]
    return random.sample(questions, min(len(questions), 5))


def generate_answers(question: str, answer: str, _: str) -> bool | str:
    reference_answers = dict(zip(['What was the initial code sample provided by Panos track?', 'How was the initial code sample modified to prevent side effects at import time?', 'What was the next step in the evolution of the script after preventing side effects at import time?', 'What improvement was made to the script to make it more generic and take command line arguments?', 'What issue arose when manually referencing sys.argv for command line arguments?', 'Which argument parser was recommended as a solution to the issues with manually referencing sys.argv?', 'What is the purpose of Ark parts?', 'How do the speaker set up an argument parser using Ark parts?', 'How can the speaker handle command-line arguments when importing a module that uses Ark parts?', 'What is the purpose of writing tests for a program using Ark parts?', 'What is the purpose of adding a new line in the print statement?', 'How can the speaker ensure that a program exits with a proper return code when a specific condition is met?', 'What is the significance of return codes in command line programs?', "What is the special object in Python that prints 'This application will now exit' when called?", "What is the alternative to using the 'exit' function in Python to ensure portability and availability?", 'What is the purpose of the dollar question mark variable in bash scripting?', 'What is the purpose of adding type annotations in Python code?', 'What is the purpose of annotating type in Python?', "What is the purpose of using 'Optional' and 'Sequence' from 'typing' module in Python?", 'How can type checking be performed in Python?', "What is the purpose of setting a default value of 'None' for a variable in Python?", "What is the significance of '__name__' and '__main__' in Python scripts?"], ["The initial code sample provided by Panos track was a simple file that prints 'hello sexy boy Anthony'.", "The initial code sample was modified by wrapping the code in a block that checks if __name__ equals '__main__' before executing the code.", 'The next step in the evolution of the script was to define a main function and move the code into that function, allowing the script to be imported and executed by calling the main function.', 'The script was improved to take command line arguments for the name, making it more generic and allowing it to greet any name provided as an argument.', "Manually referencing sys.argv for command line arguments could lead to errors like 'list index out of range' if no argument is provided or ignoring extra arguments if more than one is passed.", 'The recommended argument parser to use in Python was argparse, specifically the argparse module, to handle command line arguments more effectively.', 'Ark parts is an argument parser that helps set up and parse command-line arguments in Python programs.', 'You can set up an argument parser using Ark parts by defining the arguments the speaker want to parse, such as positional arguments, and then using the `parse_args` method to parse the arguments.', "You can handle command-line arguments by setting a default value for the command-line arguments parameter in the module's function, and then forwarding `sys.argv` to the `parse_args` method to automatically parse command-line arguments when the module is imported.", 'The purpose of writing tests for a program using Ark parts is to ensure that the argument parsing functionality works correctly and to verify the expected output based on the provided arguments.', 'Adding a new line in the print statement ensures that the output is formatted correctly and each print statement appears on a new line, preventing text from being bunched up on a single line.', "You can check for a specific condition, such as an empty string input, and use the 'sys.exit' function to exit the program with a custom return code. This ensures that the program exits with the specified return code when the condition is met.", 'In command line programs, return codes are used to indicate the success or failure of the program execution. A return code of zero typically signifies a successful execution, while non-zero return codes indicate errors or failures.', 'exit', 'sys.exit', 'It refers to the exit code of the previous command that was run.', 'Type annotations are optional in Python and do not change the runtime of the program, but they can be used for static type checking and validation.', 'Type annotations in Python are optional and do not change the runtime behavior of the program. They can be used for static type checking to validate the types of variables and functions at compile time.', "The 'Optional' type hint indicates that a variable can be of a certain type or 'None'. The 'Sequence' type hint represents a sequence of elements, such as a list or tuple. Using these type hints helps in specifying the expected types for function parameters and return values.", 'Type checking in Python can be performed using tools like MyPy, which statically analyzes the code to validate type annotations and detect type errors before runtime. Other type checkers like Pyright and Pyre can also be used for type checking in Python.', "Setting a default value of 'None' for a variable allows the variable to be optional, meaning it can either have a value of a specific type or be 'None'. This flexibility is useful when handling optional function arguments or return values.", "In Python scripts, the '__name__' variable is automatically set to '__main__' when the script is executed directly. This allows the script to run certain code blocks only when it is executed as the main program and not when it is imported as a module. This distinction helps in organizing code that should only run when the script is the main entry point."]))
    chat = langchain_openai.ChatOpenAI(model="gpt-3.5-turbo-1106", temperature=0)
    chat_answer = chat.invoke(
        [
            langchain_core.messages.SystemMessage(content="You will be given question, reference answer pair and users answer. "
                                  'You have to decide if the answer is correct. '
                                  'If it is respond with a single work "Correct" otherwise return a hint about the answer. '),
            langchain_core.messages.SystemMessage(content='The question: ' + question + '\n'
                                  'The reference answer: ' + reference_answers[question]),
            langchain_core.messages.HumanMessage(
                content=answer
            )
        ]
    ).content
    if chat_answer.startswith("Correct"):
        return True
    return chat_answer
